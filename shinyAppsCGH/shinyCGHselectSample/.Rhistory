return res;
}
"
cubefn <- cfunction(signature(n="integer", res="numeric"), code, convention=".C")
code <- "
{
int res[n] = {};
return res;
}
"
cubefn <- cfunction(signature(n="integer", res="integer"), code, convention=".C")
x <- as.numeric(1:10)
n <- as.integer(10)
## Not run:
## A simple Fortran example
code <- "
integer i
do 1 i=1, n(1)
1 x(i) = x(i)**3
"
cubefn <- cfunction(signature(n="integer", x="numeric"), code, convention=".Fortran")
cubefn(n, x)$x
code <- "
integer i
do 1 i=1, n(1)
1 x(i) = x(i)**3
"
cubefn <- cfunction(signature(n="integer", x="numeric"), code, convention=".Fortran")
code <- "
integer i
do 1 i=1, n(1)
1 x(i) = x(i)**3
"
cubefn <- cfunction(signature(n="integer", x="numeric"), code, convention=".Fortran")
?cfunction
code <- "
integer i
do 1 i=1, n(1)
1 x(i) = x(i)**3
"
cubefn <- cfunction(signature(n="integer", x="numeric"), code, convention=".Fortran")
cubefn(n, x)$x
kernLin <- function(A, B = NULL){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.klin(x, B[[j]])}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
kernQuad <- function(A, B = NULL, d = 2){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.kquad(x, B[[j]], d)}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
kernGaus <- function(A, B = NULL, s=1){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.kgaus(x, B[[j]], s)}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
kernLogit <- function(A, B = NULL, b = 0){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.klogit(x, B[[j]], b)}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
############################
n <- 5
p <- 10
x <- matrix(rnorm(n*p), p, n)
na <- sample(1:(n*p), (n*p)*.1)
x[na] <- NA
kernLin(x)
kernQuad(x)
kernGaus(x)
kernLogit(x)
set.seed(12233)
grp <- factor(rep(c('A', 'B'), each = 50))
n <- 100
p <- 950
sp <- 50
X <- lapply(1:p, function(i) rnorm(n))
X <- do.call(rbind, X)
X2 <- lapply(1:sp, function(i) c(rnorm(n/2, -1, 2),rnorm(n/2, 1, 2)))
X <- rbind(X, do.call(rbind, X2))
# Original
out <- fast.svd(t(X))
pairs(out$u[,1:3], col = grp, main = 'Original samples profile')
# Add NAs
na <- sample(1:(n*p), (n*p)*.1)
X[na] <- NA
sX <- scale(as.data.frame(t(X)))
out <- fast.svd(kernLin(sX))
pairs(out$u[,1:3], col = grp, main = 'Linear kernel on samples')
D <- seq(0.1, 5, len = 20)
out <- lapply(D, function(d){
tmp <- fast.svd(kernQuad(sX, d = d))
sum(tmp$d)
}
)
out <- do.call(c, out)
plot(out, ylim = range(out), type = 'h', main = expression(sum(lambda)))
D
D <- seq(1, 5, len = 20)
out <- lapply(D, function(d){
tmp <- fast.svd(kernQuad(sX, d = d))
sum(tmp$d)
}
)
out <- do.call(c, out)
out <- fast.svd(kernQuad(sX, d = 2))
out <- fast.svd(kernQuad(sX, d = 1))
D <- seq(1, 5, len = 10)
out <- lapply(D, function(d){
cat('d:', d, '\n')
tmp <- fast.svd(kernQuad(sX, d = d))
sum(tmp$d)
}
)
out <- fast.svd(kernQuad(sX, d = 1.45))
out <- fast.svd(kernQuad(sX, d = 1.5))
out <- fast.svd(kernQuad(sX, d = 2))
D <- seq(1, 10, len = 10)
out <- lapply(D, function(d){
cat('d:', d, '\n')
tmp <- fast.svd(kernQuad(sX, d = d))
sum(tmp$d)
}
)
out <- do.call(c, out)
plot(out, ylim = range(out), type = 'h', main = expression(sum(lambda)))
D[which.max(out)]
out
out <- fast.svd(kernQuad(sX, d = 10))
pairs(out$u[,1:3], col = grp, main = 'Quadratic kernel on samples')
out <- fast.svd(kernQuad(sX, d = 1))
pairs(out$u[,1:3], col = grp, main = 'Quadratic kernel on samples')
out <- fast.svd(kernQuad(sX, d = 2))
pairs(out$u[,1:3], col = grp, main = 'Quadratic kernel on samples')
out <- fast.svd(kernQuad(sX, d = 2))
pairs(out$u[,1:3], col = grp, main = 'Quadratic kernel on samples')
S <- seq(1, 5, len = 20)
out <- lapply(S, function(s){
tmp <- fast.svd(kernGaus(sX, s = s))
sum(tmp$d)
}
)
out <- do.call(c, out)
plot(out, ylim = range(out), type = 'h', main = expression(sum(lambda)))
S[which.max(out)]
out <- fast.svd(kernGaus(sX, s = S[which.max(out)]))
pairs(out$u[,1:3], col = grp, main = 'Gaussian kernel on samples')
S <- seq(.1, 5, len = 20)
out <- lapply(S, function(s){
cat('s:', s, '\n')
tmp <- fast.svd(kernGaus(sX, s = s))
sum(tmp$d)
}
)
out <- do.call(c, out)
plot(out, ylim = range(out), type = 'h', main = expression(sum(lambda)))
S[which.max(out)]
out <- fast.svd(kernGaus(sX, s = S[which.max(out)]))
pairs(out$u[,1:3], col = grp, main = 'Gaussian kernel on samples')
out <- lapply(0:30, function(b){
tmp <- fast.svd(kernLogit(sX, b = b))
sum(tmp$d)
}
)
out <- do.call(c, out)
plot(out, ylim = range(out), type = 'h', main = expression(sum(lambda)))
which.max(out)
out <- fast.svd(kernLogit(sX, b = which.max(out)))
pairs(out$u[,1:3], col = grp, main = 'Logit kernel on samples')
# pairs(pca$x[,1:3], col = c(rep('grey', p), rep('red', 50)))
probeCols <- c(rep('grey', p), rep('red', sp))
sX <- scale(as.data.frame(X))
out <- fast.svd(kernLin(sX))
pairs(out$u[,1:3], col = probeCols, main = 'Linear kernel on probs')
out <- fast.svd(kernQuad(sX, d = 2))
pairs(out$u[,1:3], col = probeCols, main = 'Quadratic kernel on probes')
D <- seq(1, 10, len = 10)
out <- lapply(D, function(d){
cat('d:', d, '\n')
tmp <- fast.svd(kernQuad(sX, d = d))
sum(tmp$d)
}
)
out <- do.call(c, out)
plot(out, ylim = range(out), type = 'h', main = expression(sum(lambda)))
D[which.max(out)]
out <- fast.svd(kernQuad(sX, d = 2))
pairs(out$u[,1:3], col = probeCols, main = 'Quadratic kernel on probes')
S <- seq(.1, 5, len = 20)
out <- lapply(S, function(s){
cat('s:', s, '\n')
tmp <- fast.svd(kernGaus(sX, s = s))
sum(tmp$d)
}
)
require(devtools)
install_github('rCharts', 'ramnathv')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
require(rCharts)
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
750*3.95
1950/.79
5000*.8
5000*.78
q()
# Download R (class def & codes) from synapse
require(synapseClient)
Rfiles <- synapseQuery("select id, name from entity where parentId == 'syn2117484'")
# Source Class definitions first
code <- synGet(Rfiles$entity.id[grep('Classes', Rfiles$entity.name)])
source(code@filePath)
for(id in Rfiles$entity.id[-grep('Classes', Rfiles$entity.name)]){
cat(id, '\n')
code <- synGet(id)
source(code@filePath)
}
require(synapseClient)
Rfiles <- synapseQuery("select id, name from entity where parentId == 'syn2117484'")
# Source Class definitions first
code <- synGet(Rfiles$entity.id[grep('Classes', Rfiles$entity.name)])
source(code@filePath)
for(id in Rfiles$entity.id[-grep('Classes', Rfiles$entity.name)]){
cat(id, ':', Rfiles$entity.name[Rfiles$entity.id == id],'\n')
code <- synGet(id)
source(code@filePath)
}
listFiles <- synapseQuery("select id, name from entity where entity.parentId == 'syn2025161'")
synId <- listFiles$entity.id[1]
object1 <- buildAgilent(synId)
object2 <- adjustSignal(object1)
object3 <- EMnormalize(object2, cut = c(-0.4, 0.4), MergePeaks = TRUE)
object4 <- SegmentCGH(object3, UndoSD = .5)
object5 <- createProfile(object4)
# Check the profile before saving
getDensity(object5)
getProfile(object5, ylim = range(-1.5, 1.5))
# Save results & create a shiny App.
profile <- pushToSynapse(object5)
shiny <- buildShinyData(object5, builtFrom = profile)
# Check synapse page
onWeb(shiny)
# Download R (class def & codes) from synapse
require(synapseClient)
Rfiles <- synapseQuery("select id, name from entity where parentId == 'syn2117484'")
# Source Class definitions first
code <- synGet(Rfiles$entity.id[grep('Classes', Rfiles$entity.name)])
source(code@filePath)
for(id in Rfiles$entity.id[-grep('Classes', Rfiles$entity.name)]){
cat(id, ':', Rfiles$entity.name[Rfiles$entity.id == id],'\n')
code <- synGet(id)
source(code@filePath)
}
listFiles <- synapseQuery("select id, name from entity where entity.parentId == 'syn2025161'")
synId <- listFiles$entity.id[1]
object1 <- buildAgilent(synId)
object2 <- adjustSignal(object1)
object3 <- EMnormalize(object2, cut = c(-0.4, 0.4), MergePeaks = TRUE)
object4 <- SegmentCGH(object3)
object5 <- createProfile(object4)
# Check the profile before saving
getDensity(object5)
getProfile(object5, ylim = range(-1.5, 1.5))
require(multicore)
require(corpcor)
# Kernels:
.klin <- function(x, y){
x[!is.finite(x)] <- 0; y[!is.finite(y)] <- 0
return(t(x)%*%y)
}
.kquad <- function(x, y, d){
x[!is.finite(x)] <- 0; y[!is.finite(y)] <- 0
return(1+.klin(x, y)^d)
}
.kgaus <- function(x, y, s){
x[!is.finite(x)] <- 0; y[!is.finite(y)] <- 0
return(exp(-norm(t(x-y))^2/(2*s^2)))
}
.klogit <- function(x, y, b){
x[!is.finite(x)] <- 0; y[!is.finite(y)] <- 0
return(1/(1+exp(-(b + .klin(x, y)))))
}
# Compute kernels
kernLin <- function(A, B = NULL){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.klin(x, B[[j]])}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
kernQuad <- function(A, B = NULL, d = 2){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.kquad(x, B[[j]], d)}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
kernGaus <- function(A, B = NULL, s=1){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.kgaus(x, B[[j]], s)}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
kernLogit <- function(A, B = NULL, b = 0){
if(is.null(B)) B <- t(A)
A <- mclapply(1:nrow(A), function(i) A[i,], mc.cores = 2)
B <- mclapply(1:ncol(B), function(i) B[,i], mc.cores = 2)
out <- mclapply(1:length(A), function(i){
x <- A[[i]]
tmp <- mclapply(1:length(B), function(j){.klogit(x, B[[j]], b)}, mc.cores = 2)
do.call(c, tmp)
}, mc.cores = 2)
return(do.call(rbind, out))
}
############################
# Trivial examples
n <- 5
p <- 10
x <- matrix(rnorm(n*p), p, n)
na <- sample(1:(n*p), (n*p)*.1)
x[na] <- NA
kernLin(x)
kernQuad(x)
kernGaus(x)
kernLogit(x)
x
kx
kx <- kernLogit(x)
solve(x)
n <- 5
p <- 5
x <- matrix(rnorm(n*p), p, n)
na <- sample(1:(n*p), (n*p)*.1)
x[na] <- NA
solve(x)
solve(x, na.rm = T)
?solve
?sparse
??sparse
install.packages('sparsem')
install.packages('SparseM')
require(SparseM)
x
solve(x)
?solve
solve(x)
SparseM.solve(x)
SparseM::solve(x)
kx
kernLogit(x)
kx <- kernLogit(x)
kx
x
x <- xi <- matrix(rnorm(n*p), p, n)
na <- sample(1:(n*p), (n*p)*.1)
x[na] <- NA
kx <- kernLogit(x)
xi
x
kx
q()
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
# Multi-samples with gain/loss sliders
require(shiny)
setwd("/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources/shinyAppsCGH")
runApp('./shinyCGHwithSliders/')
runApp('./shinyCGHselectSample/')
