)
Values$seg
getwd()
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
Table
Input <- reactiveValues(synId <- character(),
Table <- data.frame()
)
Values <- reactiveValues(
l2r <- numeric(),
gPos <- numeric(),
seg <- data.frame(),
dlrs <- numeric(),
MAD <- numeric(),
status <- character()
)
Gene <- reactiveValues(current = character())
Input <- reactiveValues(synId = character(),
Table = data.frame()
)
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
Samp
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
l2r <- l2r[Samp]
input$Samp <- 'syn2167060'
Input <- list()
Values <- list()
Input$synId <- gsub('(.)*-', '', input$Samp)
Input$synId
Input$Table <- .getData(Input$synId)
###########################
# Helper functions
.getData <- function(synId){
cat('getData\n')
cgh <- synGet(synId)
shinyData <- read.csv(cgh@filePath, header = TRUE, sep = '\t')
chrSelect <- which(shinyData$chrNum %in% 1:23)
shinyData <- shinyData[chrSelect,]
return(shinyData[chrSelect,])
}
.mainPlot <- function(gPos, l2r, inputSamp){
cat('mainPlot\n')
Samp <- sort(sample(1:length(gPos), 20e3))
gPos <- gPos[Samp]
l2r <- l2r[Samp]
plot(gPos, runmed(l2r, k = 5),
ylim = range(-1.5, 1.5), cex = 0.1, col = 'grey20',
cex.axis = 1, cex.lab = 1.5, las = 1, mar = c(10, 10, 10, 10), mgp = c(3, 1, 0), cex.main = 1.5,
xlab = 'Genomic position', ylab = 'Log2Ratio',
main = inputSamp, cex.main = 2)
lines(gPos, runmed(l2r, k = 81))
}
.addSegments <- function(segTable, Up, Lo, lossCol, normCol, gainCol){
cat('addSegments\n')
cat('Up:', Up, 'Lo:', Lo, '\n')
#  seg <- .makeSegTable(segTable)
segCols <- ifelse(segTable$seg <= Lo, lossCol, ifelse(segTable$seg >= Up, gainCol, normCol))
segments(x0 = segTable$Start, y0 = segTable$seg, x1 = segTable$Stop, lwd = 5, col = segCols)
}
.makeSegTable <- function(loc, seg){
.diff <- diff(seg, 1)
idx <- c(1, which(.diff != 0)+1, length(seg))
idx <- embed(idx, 2)
Start <- loc[idx[,2]]
seg <- seg[idx[,2]]
Stop <- loc[idx[,1]-1]
return(cbind.data.frame(Start = Start, Stop = Stop, seg = seg))
}
.locateChr <- function(y, hg19 = HG19){
cat('LocateChr\n')
colText = 'grey40'
colLines = 'grey80'
cumLen = cumsum(as.numeric(hg19$length))
cumCentr <- 1/2*cumLen[1]
for(chr in 2:length(cumLen)) cumCentr = c(cumCentr, cumLen[chr-1] + 1/2*cumLen[chr])
abline(h = 0)#, lty = 3)
abline(v = cumLen[1:23], col = colLines, lwd = 3, lty = 2)
text(0, y, labels = "chr", cex = 1.1, col = colText)
text(cumLen[1]/2, y, labels = 1, cex = 1.1, col = colText)
for(i in 2:23){
x <- (hg19$length[i]/2 + cumLen[i-1])
text(x, y, labels = i, cex = 1.1, col = colText)
}
}
.geneOfInt <- function(segTable, gene, DB = geneDB){
cat('geneOfInt\n')
gene <- toupper(gene)
tmp <- DB[which(DB$Symbol == gene),]
startLoc <- tmp$genomicStart
stopLoc <- tmp$genomicStop
containGene <- which(segTable$loc >= startLoc & segTable$loc <= stopLoc)
if(is.na(startLoc) | is.na(stopLoc) )
tmp <- cbind(tmp, Log2Ratio = NA)
else if(length(containGene) > 0){
geneLR <- unique(segTable$seg[containGene])
tmp <- cbind(tmp, Log2Ratio = geneLR)
}
else{
tmp <- cbind(tmp, Log2Ratio = NA)
}
return(tmp)
}
.addLabel <- function(tmp, Up, Lo, lossCol, normCol, gainCol){
cat('addLabel\n')
geneValue <- tmp$Log2Ratio
symbol <- as.character(tmp$Symbol)
Col <- ifelse(geneValue <= Lo, lossCol, ifelse(geneValue >= Up, gainCol, normCol))
x0 <- c(max(1e8, tmp$genomicStart-2.5e7), tmp$genomicStart)
x1 = c(tmp$genomicStart, tmp$genomicStart)
y0 = c(geneValue/abs(geneValue)*1.2, geneValue/abs(geneValue)*1.2)
y1 = c(geneValue/abs(geneValue)*1.2, geneValue)
Col = rep(Col, 2)
segments(x0, y0, x1, y1, col = Col, lwd = 3.5)
text( x = max(2.5e8, tmp$genomicStart - 2.0e8), y = geneValue/abs(geneValue)*1.25,
labels = c(symbol, paste0('\n\n(Log2R = ', round(geneValue, 3), ')')), cex = c(1.5, 1.25), font = 2)
}
.dlrs <- function(x){
nx <- length(x)
if (nx<3) {
stop("Vector length>2 needed for computation")
}
tmp <- embed(x,2)
diffs <- tmp[,2]-tmp[,1]
dlrs <- IQR(diffs, na.rm = TRUE)/(sqrt(2)*1.34)
return(dlrs)
}
.defStatus <- function(dLRs){
status <- ifelse(dLRs<=.1, 'Excellent (dLRs < 0.1)',
ifelse(dLRs>.1 & dLRs<=.2, 'Good (0.1 < dLRs < 0.2)',
ifelse(dLRs>.2 & dLRs<=.3, 'Poor (0.2 < dLRs < 0.3)', 'Bad (dLRs > .3)')))
return(status)
}
# End helper functions
###########################
Input$Table <- .getData(Input$synId)
head(Input$Table)
Values$gPos <- Input$Table$genomicPos
input$modtype
Values$gPos <- Input$Table$genomicPos
Values$l2r <- switch(input$modtype,
ncp = (Input$Table$Log2Ratio1),
lcp = (Input$Table$Log2Ratio2),
rcp = (Input$Table$Log2Ratio3),
ccp = (Input$Table$Log2Ratio4))
Values$seg <- switch(input$modtype,
ncp = .makeSegTable(Values$gPos,Input$Table$Segm1),
lcp = .makeSegTable(Values$gPos,Input$Table$Segm2),
rcp = .makeSegTable(Values$gPos,Input$Table$Segm3),
ccp = .makeSegTable(Values$gPos,Input$Table$Segm4)
)
head(Values$seg)
Values$dlrs <- round(.dlrs(Values$l2r), 3)
Values$dlrs
Values$MAD <- NA
Values$status <- .defStatus(Values$dlrs)
Values$status
.mainPlot(Values$gPos, Values$l2r)
.mainPlot(Values$gPos, Values$l2r, input$Samp)
.addSegments(Values$seg, input$gain, input$loss, lossCol, normCol, gainCol)
input$gain
iput$gain = log2(1.25)
ipput$gain = log2(1.25)
input$gain = log2(1.25)
input$loss = log2(.80)
gainCol
.addSegments(Values$seg, input$gain, input$loss, lossCol, normCol, gainCol)
.locateChr(1.5) # yvalue: what heigh to write
Gene$current
Gene <- list()
Gene$current <- 'EGFR'
tmp <- try(.geneOfInt(Values$seg, Gene$current), silent = TRUE)
tmp
.addLabel(tmp, input$gain, input$loss, lossCol, 'grey30', gainCol)
Values$seg
Values$seg[51,]
tmp
.geneOfInt <- function(segTable, gene, DB = geneDB){
cat('geneOfInt\n')
gene <- toupper(gene)
tmp <- DB[which(DB$Symbol == gene),]
geneStart <- tmp$genomicStart
geneStop <- tmp$genomicStop
containGene <- which(segTable$loc <= geneStart & segTable$loc >= geneStop)
if(is.na(geneStart) | is.na(geneStop))
tmp <- cbind(tmp, Log2Ratio = NA)
else if(length(containGene) > 0){
geneLR <- unique(segTable$seg[containGene])
tmp <- cbind(tmp, Log2Ratio = geneLR)
}
else{
tmp <- cbind(tmp, Log2Ratio = NA)
}
return(tmp)
}
tmp <- try(.geneOfInt(Values$seg, Gene$current), silent = TRUE)
tmp
segTable <- Values$seg
head(segTable)
gene = 'EGFR'
DB = geneDB
gene <- toupper(gene)
tmp <- DB[which(DB$Symbol == gene),]
tmp
geneStart <- tmp$genomicStart
geneStop <- tmp$genomicStop
geneStart
geneStop
containGene <- which(segTable$Start <= geneStart & segTable$Stop >= geneStop)
containGene
geneLR <- unique(segTable$seg[containGene])
tmp <- cbind(tmp, Log2Ratio = geneLR)
tmp
segTable[89,]
.geneOfInt <- function(segTable, gene, DB = geneDB){
cat('geneOfInt\n')
gene <- toupper(gene)
tmp <- DB[which(DB$Symbol == gene),]
geneStart <- tmp$genomicStart
geneStop <- tmp$genomicStop
containGene <- which(segTable$Start <= geneStart & segTable$Stop >= geneStop)
if(is.na(geneStart) | is.na(geneStop))
tmp <- cbind(tmp, Log2Ratio = NA)
else if(length(containGene) > 0){
geneLR <- unique(segTable$seg[containGene])
tmp <- cbind(tmp, Log2Ratio = geneLR)
}
else{
tmp <- cbind(tmp, Log2Ratio = NA)
}
return(tmp)
}
tmp <- try(.geneOfInt(Values$seg, Gene$current), silent = TRUE)
tmp
.addLabel(tmp, input$gain, input$loss, lossCol, 'grey30', gainCol)
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
runApp('./shinyCGHwithSliders_4/')
###########################
# Helper functions
.getData <- function(synId){
cat('getData\n')
cgh <- synGet(synId)
shinyData <- read.csv(cgh@filePath, header = TRUE, sep = '\t')
chrSelect <- which(shinyData$chrNum %in% 1:23)
shinyData <- shinyData[chrSelect,]
return(shinyData[chrSelect,])
}
.mainPlot <- function(gPos, l2r, inputSamp){
cat('mainPlot...\n')
set.seed(12345)
Samp <- sort(sample(1:length(gPos), 20e3))
gPos <- gPos[Samp]
l2r <- l2r[Samp]
plot(gPos, runmed(l2r, k = 5),
ylim = range(-1.5, 1.5), cex = 0.1, col = 'grey20',
cex.axis = 1, cex.lab = 1.5, las = 1, mar = c(10, 10, 10, 10), mgp = c(3, 1, 0), cex.main = 1.5,
xlab = 'Genomic position', ylab = 'Log2Ratio',
main = inputSamp, cex.main = 2)
lines(gPos, runmed(l2r, k = 81))
cat('Any NA:', any(is.na(gPos)), '\t', any(is.na(l2r)), '\n')
}
.addSegments <- function(segTable, Up, Lo, lossCol, normCol, gainCol){
cat('addSegments...\n')
cat('Up:', Up, 'Lo:', Lo, '\n')
segCols <- ifelse(segTable$seg <= Lo, lossCol, ifelse(segTable$seg >= Up, gainCol, normCol))
segments(x0 = segTable$Start, y0 = segTable$seg, x1 = segTable$Stop, lwd = 5, col = segCols)
}
.makeSegTable <- function(loc, seg){
cat('Making seg table...\n')
.diff <- diff(seg, 1)
idx <- c(1, which(.diff != 0)+1, length(seg))
idx <- embed(idx, 2)
Start <- loc[idx[,2]]
seg <- seg[idx[,2]]
Stop <- loc[idx[,1]-1]
return(cbind.data.frame(Start = Start, Stop = Stop, seg = seg))
}
.locateChr <- function(y, hg19 = HG19){
cat('LocateChr...\n')
colText = 'grey40'
colLines = 'grey80'
cumLen = cumsum(as.numeric(hg19$length))
cumCentr <- 1/2*cumLen[1]
for(chr in 2:length(cumLen)) cumCentr = c(cumCentr, cumLen[chr-1] + 1/2*cumLen[chr])
abline(h = 0)#, lty = 3)
abline(v = cumLen[1:23], col = colLines, lwd = 3, lty = 2)
text(0, y, labels = "chr", cex = 1.1, col = colText)
text(cumLen[1]/2, y, labels = 1, cex = 1.1, col = colText)
for(i in 2:23){
x <- (hg19$length[i]/2 + cumLen[i-1])
text(x, y, labels = i, cex = 1.1, col = colText)
}
}
.geneOfInt <- function(segTable, gene, DB = geneDB){
cat('geneOfInt...\n')
gene <- toupper(gene)
tmp <- DB[which(DB$Symbol == gene),]
geneStart <- tmp$genomicStart
geneStop <- tmp$genomicStop
containGene <- which(segTable$Start <= geneStart & segTable$Stop >= geneStop)
if(is.na(geneStart) | is.na(geneStop))
tmp <- cbind(tmp, Log2Ratio = NA)
else if(length(containGene) > 0){
geneLR <- unique(segTable$seg[containGene])
tmp <- cbind(tmp, Log2Ratio = geneLR)
}
else{
tmp <- cbind(tmp, Log2Ratio = NA)
}
return(tmp)
}
.addLabel <- function(tmp, Up, Lo, lossCol, normCol, gainCol){
cat('addLabel...\n')
geneValue <- tmp$Log2Ratio
symbol <- as.character(tmp$Symbol)
Col <- ifelse(geneValue <= Lo, lossCol, ifelse(geneValue >= Up, gainCol, normCol))
x0 <- c(max(1e8, tmp$genomicStart-2.5e7), tmp$genomicStart)
x1 = c(tmp$genomicStart, tmp$genomicStart)
y0 = c(geneValue/abs(geneValue)*1.2, geneValue/abs(geneValue)*1.2)
y1 = c(geneValue/abs(geneValue)*1.2, geneValue)
Col = rep(Col, 2)
segments(x0, y0, x1, y1, col = Col, lwd = 3.5)
text( x = max(2.5e8, tmp$genomicStart - 2.0e8), y = geneValue/abs(geneValue)*1.25,
labels = c(symbol, paste0('\n\n(Log2R = ', round(geneValue, 3), ')')), cex = c(1.5, 1.25), font = 2)
}
.dlrs <- function(x){
nx <- length(x)
if (nx<3) {
stop("Vector length>2 needed for computation")
}
tmp <- embed(x,2)
diffs <- tmp[,2]-tmp[,1]
dlrs <- IQR(diffs, na.rm = TRUE)/(sqrt(2)*1.34)
return(dlrs)
}
.defStatus <- function(dLRs){
status <- ifelse(dLRs<=.1, 'Excellent (dLRs < 0.1)',
ifelse(dLRs>.1 & dLRs<=.2, 'Good (0.1 < dLRs < 0.2)',
ifelse(dLRs>.2 & dLRs<=.3, 'Poor (0.2 < dLRs < 0.3)', 'Bad (dLRs > .3)')))
return(status)
}
# End helper functions
###########################
Input$synId <- gsub('(.)*-', '', input$Samp)
Input$Table <- .getData(Input$synId)
Values$gPos <- Input$Table$genomicPos
Values$l2r <- switch(input$modtype,
ncp = (Input$Table$Log2Ratio1),
lcp = (Input$Table$Log2Ratio2),
rcp = (Input$Table$Log2Ratio3),
ccp = (Input$Table$Log2Ratio4))
Values$seg <- switch(input$modtype,
ncp = .makeSegTable(Values$gPos,Input$Table$Segm1),
lcp = .makeSegTable(Values$gPos,Input$Table$Segm2),
rcp = .makeSegTable(Values$gPos,Input$Table$Segm3),
ccp = .makeSegTable(Values$gPos,Input$Table$Segm4)
)
Values$dlrs <- round(.dlrs(Values$l2r), 3)
Values$MAD <- NA
Values$status <- .defStatus(Values$dlrs)
Gene <- list
Gene$current <- ESR1
Gene$current <- 'ESR1'
Gene <- list()
Gene$current <- 'ESR1'
.mainPlot(Values$gPos, Values$l2r, input$Samp)
.addSegments(Values$seg, input$gain, input$loss, lossCol, normCol, gainCol)
.locateChr(1.5) # yvalue: what heigh to write
tmp <- try(.geneOfInt(Values$seg, Gene$current), silent = TRUE)
tmp
setTable <- Values$seg
head(segTable)
gene <- 'ESR1'
DB = geneDB
gene <- toupper(gene)
gene
tmp <- DB[which(DB$Symbol == gene),]
tmp
geneStart <- tmp$genomicStart
geneStop <- tmp$genomicStop
geneStart
geneStop
containGene <- which(segTable$Start <= geneStart & segTable$Stop >= geneStop)
containGene
segTable[15:20,]
segTable[21:25,]
Values$seg <- switch(input$modtype,
ncp = .makeSegTable(Input$Table$genomicPos,Input$Table$Segm1),
lcp = .makeSegTable(Input$Table$genomicPos,Input$Table$Segm2),
rcp = .makeSegTable(Input$Table$genomicPos,Input$Table$Segm3),
ccp = .makeSegTable(Input$Table$genomicPos,Input$Table$Segm4)
)
segTable <- Values$seg
segTable[21:25,]
head(Input$Table)
idx <- which(Input$Table$genomicPos>1200000000 & Input$Table$genomicPos>1400000000)
idx
idx <- which(Input$Table$genomicPos>1200000000 & Input$Table$genomicPos>1300000000)
length(idx)
idx <- which(Input$Table$genomicPos>1200000000 & Input$Table$genomicPos>1220000000)
length(idx)
idx <- which(Input$Table$genomicPos>1210000000 & Input$Table$genomicPos>1220000000)
length(idx)
tmp
idx <- which(Input$Table$genomicPos>1214500000 & Input$Table$genomicPos>1215000000)
length(idx)
idx <- which(Input$Table$genomicPos>1214550000 & Input$Table$genomicPos>1215000000)
length(idx)
head(segTable)
loc <- Input$Table$genomicPos
seg <- Input$Table$Segm1
idx <- which(loc>1214550000 & loc >1215000000)
length(idx)
.diff <- diff(seg, 1)
idx <- c(1, which(.diff != 0)+1, length(seg))
idx
tmp
s1 = tmp$genomicStart
s2 = tmp$genomicStop
s1
s2
idx <- which(loc>1214550000 & loc <1215000000)
length(idx)
Input$Table[idx,]
head(Input$Table[idx,])
s1
idx
.diff <- diff(seg, 1)
.diff[idx]
idx <- c(1, which(.diff != 0)+1, length(seg))
idx <- embed(idx, 2)
idx
tmp <- try(.geneOfInt(Values$seg, 'esr1'), silent = TRUE)
tmp
loc <- Input$Table$genomicPos
idxloc <- which(loc<s1 & loc>s2)
idxloc
s1 <- 1214553590
s2 <- 1214966368
loc <- Input$Table$genomicPos
idxloc <- which(loc<s1 & loc>s2)
idxloc
s1 <- 1214550000
s2 <- 1215000000
loc <- Input$Table$genomicPos
idxloc <- which(loc<s1 & loc>s2)
idxloc
head(loc)
idxloc <- which(loc>s1 & loc<s2)
idxloc
Table
Table[idxloc, 1:5]
Table <- Input$Table
loc <- Table$genomicPos
idxloc <- which(loc>s1 & loc<s2)
Table[idxloc, 1:5]
Table[idxloc, 5:7]
tmp
s1 <- 1214551000
s2 <- 1214970000
Table <- Input$Table
loc <- Table$genomicPos
idxloc <- which(loc>s1 & loc<s2)
Table[idxloc, 5:7]
Table[idxloc, 5:9]
tmp
s1 <- 1214552000
s2 <- 1214970000
Table <- Input$Table
loc <- Table$genomicPos
idxloc <- which(loc>s1 & loc<s2)
Table[idxloc, 5:9]
s1 <- 1214550000
s2 <- 1214970000
Table <- Input$Table
loc <- Table$genomicPos
idxloc <- which(loc>s1 & loc<s2)
Table[idxloc, 5:9]
tmp
head(Table[idxloc, 5:9])
head(Table[idxloc, 5:9], n = 20)
s1 <- 1214552000
s2 <- 1214970000
Table <- Input$Table
loc <- Table$genomicPos
idxloc <- which(loc>s1 & loc<s2)
head(Table[idxloc, 5:9], n = 20)
tmp
s1 <- 1214652000
s2 <- 1214970000
Table <- Input$Table
loc <- Table$genomicPos
idxloc <- which(loc>s1 & loc<s2)
head(Table[idxloc, 5:9], n = 20)
tmp
head(Table[idxloc, 5:12], n = 20)
s1 <- 1214752000
s2 <- 1214970000
Table <- Input$Table
loc <- Table$genomicPos
idxloc <- which(loc>s1 & loc<s2)
head(Table[idxloc, 5:12], n = 20)
tmp
