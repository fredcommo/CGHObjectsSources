tmp <- cbind.data.frame(Start = Start, Stop = Stop, do.call(c, tmp))
})
}
finalTable <- mergeSegTab(segTab)
mergeSegTab <- function(Table){
breaks <- .findBreaks(segTab)
nbreaks <- length(breaks)-1
splitTable <- split(Table, Table$ID)
output <- lapply(1:nbreaks, function(i){
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, Start, Stop))
tmp <- cbind.data.frame(Start = Start, Stop = Stop, do.call(c, tmp))
})
}
finalTable <- mergeSegTab(segTab)
mergeSegTab <- function(Table){
breaks <- .findBreaks(segTab)
nbreaks <- length(breaks)-1
splitTable <- split(Table, Table$ID)
output <- lapply(1:(nbreaks-1), function(i){
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, breaks[i]+1, breaks[i+1]))
tmp <- cbind.data.frame(Start = Start, Stop = Stop, do.call(c, tmp))
})
}
finalTable <- mergeSegTab(segTab)
breaks <- .findBreaks(segTab)
Table <- segTab
breaks <- .findBreaks(Table)
nbreaks <- length(breaks)-1
nbreaks <- length(breaks)-1
nbreaks
splitTable <- split(Table, Table$ID)
length(splitTable)
head(Table)
Table$ID
dim(segTable)
dim(segTab)
# Get the undoSd values
segTable <- c()
K <- nrow(listFiles); k <- 1
for(synId in listFiles$entity.id){
cat('\n',k, 'of', K, '\tReading:', synId, '\n')
ent <- synGet(synId)
cgh <- get(load(ent@filePath))
segTab <- rbind.data.frame(segTable, getSegTable(cgh))
cat('Dim:', dim(segTab), '\n')
k = k + 1
}
# Get the undoSd values
segTable <- c()
K <- nrow(listFiles); k <- 1
for(synId in listFiles$entity.id){
cat('\n',k, 'of', K, '\tReading:', synId, '\t')
ent <- synGet(synId)
cgh <- get(load(ent@filePath))
segTable <- rbind.data.frame(segTable, getSegTable(cgh))
cat(nrow(segTable), '\n')
k = k + 1
}
finalTable <- mergeSegTab(segTable)
mergeSegTab <- function(Table){
breaks <- .findBreaks(Table)
nbreaks <- length(breaks)-1
splitTable <- split(Table, Table$ID)
output <- lapply(1:(nbreaks), function(i){
Start <- breaks[i]+1
Stop <- breaks[i+1]
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, Start, Stop))
tmp <- cbind.data.frame(Start = Start, Stop = Stop, do.call(c, tmp))
})
}
finalTable <- mergeSegTab(segTable)
finalTable <- do.call(rbind, finalTable)
mergeSegTab <- function(Table){
breaks <- .findBreaks(Table)
nbreaks <- length(breaks)-1
splitTable <- split(Table, Table$ID)
output <- lapply(1:(nbreaks), function(i){
Start <- breaks[i]+1
Stop <- breaks[i+1]
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, Start, Stop))
tmp <- cbind.data.frame(Start = Start, Stop = Stop, do.call(c, tmp))
})
output <- as.data.frame(do.call(rbind, output))
return(output)
}
finalTable <- mergeSegTab(segTable[1:1000,])
finalTable
finalTable <- mergeSegTab(segTable[1:500,])
finalTable
head(finalTable)
i = 1
Start <- breaks[i]+1
Stop <- breaks[i+1]
Start
Stop
head(breaks)
Table <- segTable
head(Table)
splitTable <- split(Table, Table$ID)
length(splitTable)
subTable <- splitTable[1]
.getSegment(subTable, Start, Stop)
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, Start, Stop))
tmp
c(Start = Start, Stop = Stop, do.call(c, tmp))
cbind(Start = Start, Stop = Stop, do.call(c, tmp))
c(Start = Start, Stop = Stop, do.call(c, tmp))
for(subT in splitTable)
subT[1,]
for(subT in splitTable)
cat(subT[1,])
for(subT in splitTable)
sprintf(subT[1,])
for(subT in splitTable)
print(subT[1,])
for(subT in splitTable)
print(subT[1,])
head(breaks)
Stop
for(subT in splitTable)
subT[1,]$loc.start <= Start & subT[1,]$loc.end >= Stop
for(subT in splitTable)
cat(subT[1,]$loc.start <= Start & subT[1,]$loc.end >= Stop)
splitTable[[1]][1,]
head(breaks)
tmp <- splitTable[[1]][1,]
tmp$loc.start
tmp$loc.start<=Start
tmp$loc.end
Stop
all.breaks <- unique(c(Table$loc.start, Table$loc.end))
all.breaks <- sort(all.breaks)
head(all.breaks)
breaks <- .findBreaks(Table)
head(breaks)
Start <- breaks[i]+1
Start
Stop <- breaks[i+1]
Stop
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, Start, Stop))
tmp <- c(Start = Start, Stop = Stop, do.call(c, tmp))
tmp
mergeSegTab <- function(Table){
breaks <- .findBreaks(Table)
nbreaks <- length(breaks)-1
splitTable <- split(Table, Table$ID)
output <- lapply(1:(nbreaks), function(i){
Start <- breaks[i]+1
Stop <- breaks[i+1]
tmp <- lapply(splitTable, function(subTable) .getSegment(subTable, Start, Stop))
tmp <- c(Start = Start, Stop = Stop, do.call(c, tmp))
})
output <- as.data.frame(do.call(rbind, output))
return(output)
}
finalTable <- mergeSegTab(segTable[1:500,])
finalTable
head(finalTable)
dim(finalTable)
Start <- 2922758
Stop <- 2937987
test <- splitTable[[2]]
head(test)
finalTable <- mergeSegTab(segTable)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-1]
V2 <- LR[-n]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return(s)
}
dLRsdeset(eset$Log2Ratio)
dLRsd(eset$Log2Ratio)
ent <- synGet('syn2144145') #synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-1]
V2 <- LR[-n]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return((q3-q1)/(1.349*sqrt(2)))
}
dLRsd(eset$Log2Ratio)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-1]
V2 <- LR[-n]
dLR <- (V2-V1)/(1.349*sqrt(2))
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return(q3-q1)
}
ent <- synGet('syn2144145') # ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-1]
V2 <- LR[-n]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return((q3 - q1)/(1.349*sqrt(2)))
}
LR <- eset$Log2Ratio
n <- length(LR)
V1 <- LR[-c(1:5)]
V2 <- LR[-c((n-4):n)]
length(V1)
length(V2)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-c(1:5)]
V2 <- LR[-c((n-4):n)]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return((q3 - q1)/(1.349*sqrt(2)))
}
ent <- synGet('syn2144145') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-c(1:5)]
V2 <- LR[-c((n-4):n)]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return(s)
}
ent <- synGet('syn2144145') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
MAD <- function(LR){
return(median(LR - median(LR, na.rm = TRUE), na.rm = TRUE))
}
ent <- synGet('syn2144145') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
MAD(eset$Log2Ratio)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
MAD(eset$Log2Ratio)
median(LR, na.rm = TRUE)
tmp <- LR - median(LR, na.rm = TRUE)
plot(density(tmp))
plot(density(tmp, na.rm = T))
median(tmp)
median(tmp, na.rm = T)
head(eset)
MADseg <- function(eset){
tmp <- eset$Log2Ratio - eset$Segm
return(median(tmp, na.rm = TRUE))
}
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
MAD(eset$Log2Ratio)
MADseg(eset$Log2Ratio)
MADseg(eset)
ent <- synGet('syn2144145') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
MAD(eset$Log2Ratio)
MADseg(eset)
?embed
embed(seq(1, 10))
embed(seq(1, 10), 2)
dlrs <- function(x) {
nx <- length(x)
if (nx<3) {
stop("Vector length>2 needed for computation")
}
tmp <- embed(x,2)
diffs <- tmp[,2]-tmp[,1]
dlrs <- IQR(diffs)/(sqrt(2)*1.34)
return(dlrs)
}
ent <- synGet('syn2144145') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dlrs(eset$Log2Ratio)
?IQR
dlrs <- function(x) {
nx <- length(x)
if (nx<3) {
stop("Vector length>2 needed for computation")
}
tmp <- embed(x,2)
diffs <- tmp[,2]-tmp[,1]
dlrs <- IQR(diffs, na.rm = TRUE)/(sqrt(2)*1.34)
return(dlrs)
}
dlrs(eset$Log2Ratio)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-c(1:5)]
V2 <- LR[-c((n-4):n)]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return(IQR(dLR)/(1.34*sqrt(2)))
}
ent <- synGet('syn2144145') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-c(1:5)]
V2 <- LR[-c((n-4):n)]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return(IQR(dLR, na.rm = TRUE)/(1.34*sqrt(2)))
}
ent <- synGet('syn2144145') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
ent <- synGet('syn2147858') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
dLRsd <- function(LR){
n <- length(LR)
V1 <- LR[-c(1:5)]
V2 <- LR[-c((n-4):n)]
dLR <- V2-V1
q1 <- quantile(dLR, 0.25, na.rm = TRUE)
q3 <- quantile(dLR, 0.75, na.rm = TRUE)
s <- sd(dLR[which(dLR > q1 & dLR < q3)], na.rm = TRUE)/sqrt(2)
return(s)
}
dLRsd(eset$Log2Ratio)
head(eset)
chrDlrs <- function(eset){
tmp <- split(eset, eset$ChrNum)
output <- lapply(tmp, function(x) dlrs(x$Log2Ratio))
return(do.call(c, tmp))
}
chrDlrs(eset)
tmp <- split(eset, eset$ChrNum)
output <- lapply(tmp, function(x) dlrs(x$Log2Ratio))
chrDlrs <- function(eset){
tmp <- split(eset, eset$ChrNum)
output <- lapply(tmp, function(x) dlrs(x$Log2Ratio))
return(do.call(c, output))
}
chrDlrs(eset)
ent <- synGet('syn2147858') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
chrDlrs(eset)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
chrDlrs(eset)
ent <- synGet('syn2148246') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
chrDlrs(eset)
MAD <- function(LR){
tmp <- abs(LR - median(LR, na.rm = TRUE))
return(median(tmp, na.rm = TRUE))
}
MADseg <- function(eset){
tmp <- abs(eset$Log2Ratio - eset$Segm)
return(median(tmp, na.rm = TRUE))
}
ent <- synGet('syn2148246') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
chrDlrs(eset)
MAD(eset$Log2Ratio)
MADseg(eset)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
chrDlrs(eset)
MAD(eset$Log2Ratio)
MADseg(eset)
require(ADM3)
install.packages('ADM3')
require(ADM3)
dLRs(eset$Log2Ratio)
ent <- synGet('syn2148246') #
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
dLRs(eset$Log2Ratio)
ent <- synGet('syn2121688')
cgh <- get(load(ent@filePath))
eset <- getCNset(cgh)
dLRsd(eset$Log2Ratio)
dlrs(eset$Log2Ratio)
dLRs(eset$Log2Ratio)
parentId <- 'syn2117484'
setwd('/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources')
file <- File('./AllHelperFunctions.R', parentId = parentId)
file <- synStore(file)
parentId <- 'syn2117484'
setwd('/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources')
file <- File('./AllMethods.R', parentId = parentId)
file <- synStore(file)
# Download R (class def & codes) from synapse
require(synapseClient)
workflow <- synGet('syn2128342')
source(workflow@filePath)
listFiles <- synapseQuery("select id, name from entity where entity.parentId == 'syn2025161'")
synId <- listFiles$entity.id[1]
synId
cat('\nRunning on:', synId, '\n')
object1 <- buildAgilent(synId)
object2 <- adjustSignal(object1)
object3 <- EMnormalize(object2, cut = c(-0.5, 0.5), MergePeaks = TRUE)
object4 <- SegmentCGH(object3)
object5 <- createProfile(object4)
getParam(object5)
parentId <- 'syn2117484'
setwd('/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources')
file <- File('./AllMethods.R', parentId = parentId)
file <- synStore(file)
require(synapseClient)
workflow <- synGet('syn2128342')
source(workflow@filePath)
synId <- listFiles$entity.id[1]
cat('\nRunning on:', synId, '\n')
object1 <- buildAgilent(synId)
object2 <- adjustSignal(object1)
object3 <- EMnormalize(object2, cut = c(-0.5, 0.5), MergePeaks = TRUE)
object4 <- SegmentCGH(object3)
object5 <- createProfile(object4)
getParam(object5)
parentId <- 'syn2117484'
setwd('/Users/fredcommo/Documents/Projet_Safir/CGHObjectsSources')
file <- File('./AllMethods.R', parentId = parentId)
file <- synStore(file)
require(synapseClient)
workflow <- synGet('syn2128342')
source(workflow@filePath)
synId <- listFiles$entity.id[1]
cat('\nRunning on:', synId, '\n')
object1 <- buildAgilent(synId)
object2 <- adjustSignal(object1)
object3 <- EMnormalize(object2, cut = c(-0.5, 0.5), MergePeaks = TRUE)
object4 <- SegmentCGH(object3)
object5 <- createProfile(object4)
getParam(object5)
sqrt(.02)
sqrt(.02)*3
